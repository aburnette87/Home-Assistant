away_mode:
  alias: Away Mode
  sequence:
    - type: turn_off
      device_id: 9e5109eed6d6bc84be21d5e5d3680ba6
      entity_id: light.vanity_lights
      domain: light
    - device_id: 0fcdce9e3558b4a033d730950bbaf841
      domain: climate
      entity_id: climate.ecobee_thermostat
      type: set_hvac_mode
      hvac_mode: "off"
    - device_id: 80b5e1db60d2b669d597a4853024b0da
      domain: lock
      entity_id: lock.vivint_front_door_lock
      type: lock
    - device_id: 4f6f930545e325cf48864f58dcc05858
      domain: alarm_control_panel
      entity_id: alarm_control_panel.vivint_smart_hub
      type: arm_away
    - action: light.turn_off
      metadata: {}
      data: {}
      target:
        entity_id: light.all_hue
  description: ""

light_sunrise_2:
  fields:
    target_kelvin:
      description: Coldest Kelvin value. This is the end value - most white
      selector:
        color_temp:
          unit: kelvin
      default: 6500
      name: Coldest Kelvin
    start_kelvin:
      description:
        This is the start value. If the light is on the current value from
        the state of the light will be used and this will be ignored.
      selector:
        color_temp:
          unit: kelvin
          min: 2500
          max: 6500
      default: 2500
      name: Warmest Kelvin
    max_brightness_pct:
      description: Maximum brightness in percent to reach by the end of the script
      selector:
        number:
          min: 1
          max: 100
      default: 80
      name: Max brightness
    alarm_length:
      description:
        This is the start to finish time. Take this into account when setting
        up the automation this script is called by.
      selector:
        number:
          min: 1
          max: 60
      default: 10
      name: Alarm Length
    steps_per_minute:
      description: How many steps per minute
      selector:
        number:
          min: 1
          max: 12
      default: 12
      name: Steps Per minute
    target_light:
      description: A single light or group
      selector:
        entity:
          filter:
            domain: light
      name: Target Light
    light_timeout:
      description:
        Minutes to delay after Max Brightness has been reached to turn
        the light back off. Value of 0 disables the timeout
      selector:
        number:
          min: 0
          max: 60
      default: 5
      name: Light Timeout
  variables:
    steps: "{{ alarm_length * steps_per_minute }}"
    min_brightness:
      "{% if states(target_light) == 'off' %}\n  3\n{% else %}\n  {{
      state_attr(target_light, 'brightness') }}\n{% endif %}"
    max_brightness: "{{ max_brightness_pct * 2.55 }}"
    kelvin_step: "{{ (target_kelvin - start_kelvin) / steps }}"
    bright_step: "{{ (max_brightness - min_brightness) / steps }}"
    start_time: "{{ as_timestamp(now()) }}"
    individual_step: "{{ 60 / steps_per_minute }}"
  sequence:
    - repeat:
        until:
          - condition: or
            conditions:
              - condition: template
                value_template: "{{ is_state(target_light, 'off') }}"
              - condition: template
                value_template:
                  "{{ state_attr(target_light, 'brightness') >= max_brightness
                  }}"
              - condition: template
                value_template:
                  "{{ state_attr(target_light, 'color_temp_kelvin') >= target_kelvin
                  }}"
              - condition: template
                value_template:
                  '{{ (((as_timestamp(now()) - start_time) / individual_step)
                  | round(0, "ceil")) > steps }}'
        sequence:
          - variables:
              steps_to_now:
                "{{ ((as_timestamp(now()) - start_time) / individual_step)
                |\n  round(0, \"ceil\") }}"
              brightness:
                "{{ min_brightness + (bright_step * steps_to_now) | round(0,
                'ceil') }}"
              kelvin: "{{ start_kelvin + (kelvin_step * steps_to_now) }}"
          - delay:
              seconds: "{{ individual_step }}"
          - if:
              - condition: template
                value_template: "{{ is_state(target_light, 'on') }}"
            then:
              - data:
                  brightness: "{{ brightness }}"
                  color_temp_kelvin: "{{ kelvin }}"
                  transition: "{{ individual_step - 1 }}"
                target:
                  entity_id: "{{ target_light }}"
                action: light.turn_on
    - if:
        - condition: and
          conditions:
            - condition: template
              value_template: "{{ light_timeout != 0 }}"
            - condition: template
              value_template: "{{ is_state(target_light, 'on') }}"
      then:
        - delay:
            minutes: "{{ light_timeout }}"
        - data: {}
          target:
            entity_id: "{{ target_light }}"
          action: light.turn_off
  mode: parallel
  alias: Light Sunrise
  description: ""
